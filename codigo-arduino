 /* ******************** Interruptor Clap Manual do Mundo ********************
    
    Criado por: Fernando A Souza
    Rev.: 01
    Data: 03.08.2019

    Modificado por: Alisson Michel Sganzerla
    Data: 10.03.2020


    Guia de conexão:
     
    Arduino:
    SENSOR SOM: Pino Digital 2
    SENSOR SOM REGULAGEM: Pino Analógico A5
    LED 1: Pino Digital 4
    LED 2: Pino Digital 5
    LED 3: Pino Digital 6
    LED 4: Pino Digital 7
    LED TESTE: Pino Digital 13

    Sensor de Som (Módulo KY-038): 
    GND: GDN Arduino
    VCC: 5V Arduino
    
    LEDS: 
    GND: GDN Arduino com resistor de 220 a 300
    VCC: 5V Arduino
       
  ***************************************************************************** */

 /**************************** DEFINIÇÕES ************************************* */

 // Os números associados a cada variável seguem o guia de conexões e representam as portas digitais usadas. 
 #define PIN_LED1 4
 #define PIN_LED2 5
 #define PIN_LED3 6
 #define PIN_LED4 7
 #define SENSOR_SOM 2
 // Utilizado para regular sensor de som
 # define SENSOR_SOM_ANALOGICO A5 // porta analógica
 # define PIN_LED_TESTE 13

 /***************************************************************************** */

 /************************ VARIÁVEIS AUXILIARES ******************************* */

 // Essas variáveis definem alguns parâmetros do programa e auxiliam na detecção e contagem das palmas.
 int delayfinal = 100; // Valor representa um tempo em milissegundos, esse tempo é aguardado pelo programa para que se inicie novamente o loop.  
 int duracaoPalma = 200; // Valor representa um tempo em milissegundos, é o tempo que dura o som de uma palma, precisa ser calibrado entre 100 e 250. 
 int intervaloPalmas = 500; // Valor representa um tempo em milissegundos, é o intervalo máximo permitido entre uma sequência de palmas.  
 int quantidadePalmas = 0; // Quantidade de palmas registradas.
 long momentoPalma = 0; // Marcador usado para a detecção das palmas, será utilizado junto com a função millis. 
 long esperaPalmas = 0; // Marcador usado para contagem dos intervalos de tempo, será utilizado junto com a função millis. 

 /***************************************************************************** */

 /******************* CONFIGURAÇÕES INICIAIS DO CÓDIGO ************************ */

 void setup() {
   // Definição para regulagem do sensor de som  
   pinMode(SENSOR_SOM_ANALOGICO, INPUT);
   pinMode(PIN_LED_TESTE, OUTPUT);

   // Definição da função de cada pino, se vão receber (INPUT) ou enviar (OUTPUT) informações.
   pinMode(SENSOR_SOM, INPUT);
   pinMode(PIN_LED1, OUTPUT);
   pinMode(PIN_LED2, OUTPUT);
   pinMode(PIN_LED3, OUTPUT);
   pinMode(PIN_LED4, OUTPUT);

   // Inicia todos os relés na posição na qual os contatos estão desligados. Nosso módulo relé tem a lógica invertida HIGH desliga as portas, verifique se o usado por você também apresenta a mesma lógica.
   digitalWrite(PIN_LED1, LOW);
   digitalWrite(PIN_LED2, LOW);
   digitalWrite(PIN_LED3, LOW);
   digitalWrite(PIN_LED4, LOW);
   Serial.begin(9600);

 }

 /***************************************************************************** */

 /********************* EXECUÇÃO DO CÓDIGO QUE SE REPETE ********************** */

 void loop() {

   acenderLedParaRegulagemSensor();

   // Faz a leitura digital do sensor de som, quando este sensor detecta som ele desliga a porta de entrada, mudando seu estado para LOW e quando não detecta mantem em HIGH.
   int leituraSom = digitalRead(SENSOR_SOM);
   // Ações quando o sensor detectar som, ou seja, entrar em LOW. 
   if (leituraSom == HIGH) {

     // Marca o momento da palma, soma a quantidade de palmas e aguarda um intervalo para não marcar a mesma palma mais de uma vez. 
     if (momentoPalma == 0) {
       momentoPalma = esperaPalmas = millis();
       quantidadePalmas = quantidadePalmas + 1;
     } else if ((millis() - momentoPalma) >= duracaoPalma) {
       momentoPalma = 0;
     }

   }

   // Verifica se nenhuma palma mais pode ser dada, e em seguida faz o acionamento dos relés conforme o número de palmas já registrado. 
   if (((millis() - esperaPalmas) > intervaloPalmas) && (quantidadePalmas != 0)) {

     if (quantidadePalmas == 1) {
       digitalWrite(PIN_LED1, !digitalRead(PIN_LED1)); // O sinal de exclamação inverte a condição do relé, se estava ligado será desligado e vice versa. 
       digitalWrite(PIN_LED2, !digitalRead(PIN_LED2)); // O sinal de exclamação inverte a condição do relé, se estava ligado será desligado e vice versa. 
     }
     if (quantidadePalmas == 2) {
       digitalWrite(PIN_LED3, !digitalRead(PIN_LED3)); // O sinal de exclamação inverte a condição do relé, se estava ligado será desligado e vice versa. 
       digitalWrite(PIN_LED4, !digitalRead(PIN_LED4)); // O sinal de exclamação inverte a condição do relé, se estava ligado será desligado e vice versa. 
     }

     delay(delayfinal); // Tempo de espera para continuar o programa, esse tempo é importante para evitar efeitos de possiveis detecções truncadas de ecos e reverberações no som. 
     quantidadePalmas = 0; // Retoma a condição inicial da quantidade de palmas. 
   }

 }

 void acenderLedParaRegulagemSensor() {
   int som = analogRead(SENSOR_SOM_ANALOGICO);
   if (som > 535) // depois de regulado pode ser removido do código
   {
     digitalWrite(PIN_LED_TESTE, HIGH);
     Serial.println(som);
   } else {
     digitalWrite(PIN_LED_TESTE, LOW);
   }
}
 /***************************************************************************** */